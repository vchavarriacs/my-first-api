# Challenge 3: Connecting to MongoDB

In this challenge, you’ll connect your API to a MongoDB database—like upgrading the restaurant’s kitchen to a modern storage system! You’ll replace the JSON file with a real database to store and retrieve books.

## Prerequisites

- Install [Node.js](https://nodejs.org).
- Set up MongoDB:
  - **Option 1: Local**: Install [MongoDB Community Server](https://www.mongodb.com/try/download/community) and run `mongod` in a terminal.
  - **Option 2: Cloud**: Create a free [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) cluster and get the connection string.

## Setup

1. Navigate to this folder:
   ```bash
   cd challenge-3

Install dependencies:
bash
npm install
Update server.js (if using Atlas):
Replace the uri variable with your Atlas connection string (e.g., mongodb+srv://<username>:<password>@cluster0.mongodb.net/).

Run the API:
bash
node server.js

Try It Out
Get Books: Visit http://localhost:3000/books in your browser. You’ll see initial books plus any you add.

Add a Book: Use one of these commands:

Using curl (Linux/Mac or Windows with curl installed):

bash
curl -X POST -H "Content-Type: application/json" -d '{"title":"The Martian","author":"Andy Weir"}' http://localhost:3000/books
Using PowerShell (Windows):

powershell
Invoke-WebRequest -Method POST -Uri "http://localhost:3000/books" -Headers @{ "Content-Type" = "application/json" } -Body '{"title":"The Martian","author":"Andy Weir"}'

Refresh http://localhost:3000/books to see the updated list!

Stop the Server: Press Ctrl + C in the terminal.

Verify MongoDB
MongoDB Shell: Run mongo, then:
bash
use bookstore
db.books.find()

MongoDB Compass: Download Compass, connect to mongodb://localhost:27017, and view bookstore > books.

Files
server.js: The API code with MongoDB integration.
package.json: Project setup and dependencies.

What You’ll Learn
Connecting to a MongoDB database.
Storing and retrieving data with GET and POST requests.
Using async/await for database operations.

Next Steps
Congratulations! You’ve built a database-driven API. What’s next? Maybe add DELETE or PUT endpoints in a future challenge!
